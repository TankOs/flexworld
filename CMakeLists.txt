cmake_minimum_required( VERSION 2.8 )
project( FlexWorld )

if( NOT CMAKE_BUILD_TYPE )
	set( CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build (Debug or Release)" FORCE )
endif()

#
# Detections.
#
if( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
	set( WINDOWS 1 )
elseif( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
	set( LINUX 1 )
else()
	message( FATAL_ERROR "Unsupported system." )
endif()

if( CMAKE_COMPILER_IS_GNUCXX )
	set( COMPILER_GCC 1 )
elseif( MSVC_VERSION )
	set( COMPILER_MSVC 1 )
endif()

set( CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${PROJECT_SOURCE_DIR}/cmake;${PROJECT_SOURCE_DIR}/extlibs/SFML/cmake/Modules;${PROJECT_SOURCE_DIR}/extlibs/SFGUI/cmake" )

#
# Global project settings.
#
set( FW_VERSION_SUFFIX "DEV" CACHE STRING "Version suffix." )
set( FW_PORTABLE_INSTALL TRUE CACHE BOOL "Install portable (especially useful for distributing Linux test releases(!), so that both client and server don't use absolute system paths)." )

# Configure data root directory.
if( WINDOWS )
	set( FW_ROOT_DATA_DIRECTORY "./" )
else()
	if( FW_PORTABLE_INSTALL )
		set( FW_ROOT_DATA_DIRECTORY "./" )
	else()
		set( FW_ROOT_DATA_DIRECTORY "${CMAKE_INSTALL_PREFIX}/games/flexworld/" )
	endif()
endif()

#
# Targets.
#
set( FW_BUILD_CLIENT true CACHE BOOL "Build client." )
set( FW_BUILD_SERVER true CACHE BOOL "Build (dedicated) server." )
set( FW_BUILD_TEST true CACHE BOOL "Build unit tests." )
set( FW_BUILD_DOC false CACHE BOOL "Build API docs (requires Doxygen)." )
set( FW_BUILD_CONVERT2FWM false CACHE BOOL "Build convert2fwm tool." )

#
# Platform-specific.
#
if( WINDOWS )
	set( BIN_EXTENSION ".exe" )
	set( SHARE_TARGET_DIR . )
	add_definitions( -DWINDOWS )
else()
	set( SHARE_TARGET_DIR share/FlexWorld )
	add_definitions( -DLINUX )
endif()

#
# Linker options.
#
set( Boost_USE_STATIC_LIBS false CACHE BOOL "Use Boost's static libraries." )
set( SFML_STATIC_LIBRARIES false CACHE BOOL "Was SFML built as a static library?" )
set( SFGUI_STATIC_LIBRARIES false CACHE BOOL "Was SFGUI built as a static library?" )

#
# Compiler-specific.
#
if( COMPILER_GCC )
	if( NOT CMAKE_CXX_FLAGS )
		set( CMAKE_CXX_FLAGS "--std=c++0x -Wall -Wextra -Wshadow -Wconversion -pedantic" CACHE STRING "C++ compiler flags" FORCE )
		set( CMAKE_C_FLAGS "--std=c++0x -Wall -Wextra -Wshadow -Wconversion -pedantic" CACHE STRING "C compiler flags" FORCE )
	endif()

	if( NOT CMAKE_CXX_FLAGS_DEBUG )
		set( CMAKE_CXX_FLAGS_DEBUG "-g -O0" CACHE STRING "C++ compiler flags (debug)" FORCE )
		set( CMAKE_C_FLAGS_DEBUG "-g -O0" CACHE STRING "C++ compiler flags (debug)" FORCE )
	endif()
endif()

#
# Boost-specific.
#
add_definitions( -DBOOST_DATE_TIME_NO_LIB )
add_definitions( -DBOOST_REGEX_NO_LIB )
set( Boost_ADDITIONAL_VERSIONS "1.49" "1.49.0" )

if( WINDOWS )
	add_definitions( -D_WIN32_WINNT=0x0501 )
endif()

#
# Find packages.
#
set( BOOST_COMPONENTS thread filesystem system )
set( SFML_COMPONENTS SYSTEM )

if( FW_BUILD_CLIENT )
	set( BOOST_COMPONENTS ${BOOST_COMPONENTS} date_time )
	set( SFML_COMPONENTS ${SFML_COMPONENTS} GRAPHICS AUDIO WINDOW )
endif()

if( FW_BUILD_TEST )
	set( BOOST_COMPONENTS ${BOOST_COMPONENTS} unit_test_framework )
endif()

find_package( Boost 1.47 COMPONENTS ${BOOST_COMPONENTS} REQUIRED )
find_package( SFML 2.0 COMPONENTS ${SFML_COMPONENTS} REQUIRED )
find_package( yaml-cpp REQUIRED )
find_package( Threads REQUIRED )

if( NOT WINDOWS )
	find_package( X11 REQUIRED )
endif()

if( FW_BUILD_CLIENT )
	find_package( OpenGL REQUIRED )
	find_package( SFGUI REQUIRED )
endif()

# Build FWSG.
add_subdirectory( "extlibs/FWSG" )

add_subdirectory( "lib" )

if( FW_BUILD_DOC )
	add_subdirectory( "doc" )
endif()

if( FW_BUILD_SERVER )
	add_subdirectory( "server" )
endif()

if( FW_BUILD_CLIENT )
	add_subdirectory( "client" )
endif()

if( FW_BUILD_TEST )
	add_subdirectory( "test" )
endif()

if( FW_BUILD_CONVERT2FWM )
	add_subdirectory( "tools/convert2fwm" )
endif()

add_subdirectory( "modes" )
